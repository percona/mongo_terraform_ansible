# Note:
# Consider overriding all the following variables at Ansible runtime via --extra-vars
# - keyfile_content
# - mongo_root_password
# - pmm_server_pwd
# - mongodb_pmm_user_pwd
# - pbmpwd
# - access_key_id (used for accesing S3 bucket for Backups)
# - secret_access_key (used for accesing S3 bucket for Backups)
# - encryption_key_content (if using encryption at rest)
# - vault_tokenfile_content (if using Hashicorp Vault)

#########################
## General configuration
#########################

percona_key_location: https://repo.percona.com/yum/PERCONA-PACKAGING-KEY
percona_repo: https://repo.percona.com/yum/percona-release-latest.noarch.rpm

# MongoDB version as per "percona-release". Availability of MongoDB version depend on the OS version.
# e.g. -> Available repositories for centos7: psmdb-36 psmdb-40 psmdb-42 psmdb-44 psmdb-50 psmdb-60
mongo_release: psmdb-70

# packages and router_packages lists are only relevant if copy_files: false
# you can use a specific version instead of the default `latest` by passing the package names and version e.g. percona-server-mongodb-7.0.12-7.el9
packages:
  - percona-server-mongodb-7.0.11-6.el9
  - percona-backup-mongodb
  - pmm2-client

router_packages:
   - percona-server-mongodb         # to be removed when we add logic to create user, group, dir, etc. for mongos
   - percona-server-mongodb-mongos
   - percona-server-mongodb-shell
   - pmm2-client

# copy rpm files from a local path. If false yum will be used to download from a configured repository
copy_files: false
   
# where to copy rpm files from if copy_files:true. We need to have pbm, pmm2-client and percona-server-mongodb packages available on this directory
local_rpm_location: /home/my-user/mongo/

# where to copy rpm files to in the target hosts
target_rpm_location: /tmp/

#####################
# MongoDB admin user
#####################

mongo_root_password: percona

################
# Network ports
################

cfg_server_port: 27019
shard_port: 27018
mongos_port: 27017
replicaset_port: 27017

################
# MongoDB paths 
################

mongod_log_path: /var/log/mongo/
mongod_path: /var/lib/mongo/

thp_location: /usr/lib/systemd/system/disable-thp.service

##################
## Authentication 
##################

# use_tls: true/false. Controls if Mongo uses keyfile or x509 certificates for member authentication. Also controls if clients need to use TLS to connect.
use_tls: false

# keyFile is only relevant if use_tls: false. Run `openssl rand -base64 741` to generate a new key
keyFile_location: /etc/mongod_keyfile
keyfile_content: |
  8pYcxvCqoe89kcp33KuTtKVf5MoHGEFjTnudrq5BosvWRoIxLowmdjrmUpVfAivh
  CHjqM6w0zVBytAxH1lW+7teMYe6eDn2S/O/1YlRRiW57bWU3zjliW3VdguJar5i9

# The next 2 options are only relevant if use_tls: true
certificateKeyFile: /etc/ssl/server.pem
CAFile: /etc/ssl/test-ca.pem

################
## Encryption
################

# keyfile_encryption: true/false
keyfile_encryption: false
encryption_key_content: |
  vvMTZ3dnSbG7wc6DkPpt+rp3Cc+jF8lJsYlq6QE1yEM=
# path to the keyfile to encrypt
encryption_keyfile: /opt/mongodb.key

# vault_encryption: true/false - set to true to use Hashicorp Vault instead of local keyfile
vault_encryption: false
vault_server: vault.example.com
vault_port: 8200
# path to the token used by MongoDB to access Vault
vault_tokenfile: /etc/mongodb/token
vault_tokenfile_content: |
  s.uTrHtzsZnEE7KyHeA797CkWA
vault_cafile: /etc/mongodb/vault.crt
# path to the secret within Vault
vault_secret: secret/data/dc/psmongodb1

##################
## Monitoring
##################

# Can also use perconalab/pmm-server-fb:PR-number-hash
pmm_image: docker.io/percona/pmm-server:latest

# PMM server parameters
pmm_dir: /var/lib/docker
pmm_server_user: admin
pmm_server_pwd: admin

# PMM agent parameters
mongodb_pmm_user: mongodb_exporter
mongodb_pmm_user_pwd: percona

# The pmm-admin --cluster argument is only applicable for sharded clusters
# the next line is automatically put into the inventory file by Terraform. 
# If not provisioning servers with Terraform uncomment the following line and provide the desired cluster name
#
#cluster: dev

###############
## Backup
###############

pbmuser: pbm
pbmpwd: secretpwd
pbm_backup_type: physical
pbm_retention_days: 3
pbm_backup_hour: 0
pbm_backup_minute: 2
pbm_purge_hour: 0
pbm_purge_minute: 2
pbm_os_user: mongod

# backup location - set true for locally mounted NFS drive or false for S3-compatible storage bucket
pbm_local: false

# only relevant if pbm_local: true
pbm_path: /backup

# only relevant if pbm_local: false
# the next 2 are put into the inventory file by Terraform. If not provisioning servers with Terraform uncomment the following lines
#region: northamerica-northeast1
#bucket: dev-mongo-backups
prefix: pbm
endpointUrl: https://storage.googleapis.com
# the access and secret access keys are best provided via --extra-vars at runtime to avoid exposing them
#access_key_id: *****
#secret_access_key: *****
