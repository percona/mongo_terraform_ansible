# Note:
# Consider overriding all the following variables at Ansible runtime via --extra-vars
# - keyfile_content
# - mongo_root_password
# - pmm_server_pwd
# - mongodb_pmm_user_pwd
# - pbmpwd
# - access_key_id (used for accesing S3 bucket for Backups)
# - secret_access_key (used for accesing S3 bucket for Backups)
# - encryption_key_content (if using encryption at rest)
# - vault_tokenfile_content (if using Hashicorp Vault)

#########################
## General configuration
#########################

# MongoDB version as per "percona-release". Availability of MongoDB version depend on the OS version.
# e.g. -> Available repositories for centos7: psmdb-36 psmdb-40 psmdb-42 psmdb-44 psmdb-50 psmdb-60
#mongo_release: psmdb-70
mongo_release: psmdb-80

# We can also use perconalab/pmm-server-fb:PR-number-hash or perconalab/pmm-server:dev-latest. In that case set experimental to true.
#pmm_image: perconalab/pmm-server:3-dev-latest
pmm_image: docker.io/percona/pmm-server:latest
#pmm_image: docker.io/percona/pmm-server:3

#pmm_client_repo: pmm2-client experimental
#pmm_client_repo: pmm2-client
pmm_client_repo: pmm3-client

#########################
## Package sources
#########################

# "mongod_packages" and "mongos_packages" lists are only relevant if copy_files: false
# you can use a specific version instead of the default `latest` by passing the package names and version e.g. "percona-server-mongodb-7.0.12-7.el9"
mongod_packages:
  - percona-server-mongodb
  - percona-mongodb-mongosh

mongos_packages:
   - percona-server-mongodb-mongos
   - percona-mongodb-mongosh   

pbm_package:
  - percona-backup-mongodb

pmm_client_package:
  - pmm-client

# copy package files from a local path on your machine. Useful in environments without direct access to the Internet
# If set to false, package manager will try to download packages from the repository
copy_files: false

# where to copy package files from if copy_files:true. We need to have pbm, pmm-client and percona-server-mongodb packages available
mongod_local_package_location: /home/my-user/mongod
mongos_local_package_location: /home/my-user/mongos
pbm_local_package_location: /home/my-user/pbm
pmm_local_package_location: /home/my-user/pmm-client
# where to copy rpm files to in the target hosts
mongod_target_package_location: /tmp/mongod/
mongos_target_package_location: /tmp/mongos
pbm_target_package_location: /tmp/pbm
pmm_target_package_location: /tmp/pmm-client

disable_telemetry: false

##########
# MongoDB 
##########

mongo_admin_user: root
# Warning! This is just an example, replace with your own for prod use!
mongo_admin_password: percona

mongod_log_path: /var/log/mongo/
mongod_path: /var/lib/mongo/

thp_location: /usr/lib/systemd/system/disable-thp.service

########################
## Member Authentication
########################

# use_tls: true/false. Controls if Mongo uses keyfile or x509 certificates for member authentication. Also controls if clients need to use TLS to connect.
use_tls: false

# keyFile is only relevant if use_tls: false. Run `openssl rand -base64 741` to generate a new key
keyFile_location: /etc/mongod_keyfile

# Warning! This is just an example, replace with your own for prod use!
keyfile_content: |
  8pYcxvCqoe89kcp33KuTtKVf5MoHGEFjTnudrq5BosvWRoIxLowmdjrmUpVfAivh
  CHjqM6w0zVBytAxH1lW+7teMYe6eDn2S/O/1YlRRiW57bWU3zjliW3VdguJar5i9

# The next 2 options are only relevant if use_tls: true
certificateKeyFile: /etc/ssl/server.pem
CAFile: /etc/ssl/test-ca.pem

##########################
## Data-at-rest Encryption
##########################

# keyfile_encryption: true/false
keyfile_encryption: false

# Warning! This is just an example, replace with your own for prod use!
encryption_key_content: |
  vvMTZ3dnSbG7wc6DkPpt+rp3Cc+jF8lJsYlq6QE1yEM=

# path to the keyfile to encrypt
encryption_keyfile: /opt/mongodb.key

# vault_encryption: true/false - set to true to use Hashicorp Vault instead of local keyfile
vault_encryption: false
vault_server: vault.example.com
vault_port: 8200
# path to the token used by MongoDB to access Vault
vault_tokenfile: /etc/mongodb/token
# Warning! This is just an example, replace with your own for prod use!
vault_tokenfile_content: |
  s.uTrHtzsZnEE7KyHeA797CkWA
vault_cafile: /etc/mongodb/vault.crt
# path to the secret within Vault
vault_secret: secret/data/dc/psmongodb1

##################
## Monitoring
##################

# For PMM 3 pmm_port is 8443. For PMM 2 it is 443
#pmm_port: 443
pmm_port: 8443
pmm_external_port: 8443

# PMM server parameters
pmm_dir: /var/lib/docker
pmm_server_user: admin
# Warning! This is just an example, replace with your own for prod use!
pmm_server_pwd: admin

# PMM agent parameters
mongodb_pmm_user: mongodb_exporter
# Warning! This is just an example, replace with your own for prod use!
mongodb_pmm_user_pwd: percona

# Warning! This is just an example, replace with your own for prod use!
watchtower_token: 89220f28d5017b6a5806a7c589485c2b

env_tag: test
# The pmm-admin --cluster argument is only applicable for sharded clusters.
# The cluster name is automatically put into the inventory file generated by Terraform.
# If not provisioning servers with Terraform uncomment the following line and provide the desired cluster name here:
#
#cluster: dev

###############
## Backup
###############
  
pbmuser: pbm
# Warning! This is just an example, replace with your own for prod use!
pbmpwd: secretpwd
pbm_backup_type: physical
pbm_retention_days: 3
pbm_backup_hour: 0
pbm_backup_minute: 2
pbm_purge_hour: 0
pbm_purge_minute: 2
pbm_os_user: mongod

pbm_config_path: /etc/pbm-storage.conf

# backup location - set true for locally mounted NFS drive or false for S3-compatible storage bucket
pbm_local: false

# only relevant if pbm_local: true
pbm_path: /backup

# only relevant if pbm_local: false
# custom prefix for the directory structure created by pbm inside the S3 bucket. By default the cluster name is used.
#prefix: pbm
#
# the region, bucket, endpoint and keys are put into the inventory file by Terraform. If not provisioning servers with Terraform uncomment the following lines:
#
#region: northamerica-northeast1
#bucket: dev-mongo-backups
#endpointUrl: https://storage.googleapis.com
#
# the access and secret access keys are best provided via --extra-vars at runtime to avoid exposing them in the inventory file
#access_key_id: *****
#secret_access_key: *****
