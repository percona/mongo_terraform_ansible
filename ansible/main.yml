---
- name: prepare OS configuration
  hosts: all
  tags: os_conf
  become : yes
  tasks:
    - name: tune sysctl
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: true
      with_items:
        - { key: vm.swappiness, value: "1" }
        - { key: vm.dirty_ratio, value: "15" }
        - { key: vm.dirty_background_ratio, value: "5" }
        - { key: net.core.somaxconn, value: "65535" }
        - { key: vm.max_map_count, value: "102400" }

    - name: modify limits
      community.general.pam_limits:
        domain: "{{ item.domain }}"
        limit_type: "{{ item.type }}"
        limit_item: "{{ item.it }}"
        value: "{{ item.value }}"
      with_items:
        - { domain: '*', type: soft, it: nofile, value: 64000 }
        - { domain: '*', type: hard, it: nofile, value: 64000 }

    - name: add PAM limits to login
      community.general.pamd:
        state: after
        type: session
        module_path: postlogin
        control: include
        new_type: session
        new_module_path: pam_limits.so
        new_control: required
        name: login

    - name: prepare disable transparent huge pages systemd service
      template:
        src: disable-thp.service.j2
        dest: "{{ thp_location }}"
        owner: root
        group: root
        mode: 0644

    - name: run disable THP service
      systemd:
        name: disable-thp
        enabled: true
        state: started
        daemon_reload: yes

- name: install MongoDB
  hosts: cfg:shard*:rs*
  gather_facts: false
  become: yes
  tags: install
  tasks:
    - name: Create datadir
      file:
        path: "{{ mongod_path }}"
        state: directory
        mode: 0770

    - name: Create an XFS filesystem 
      community.general.filesystem:
        fstype: xfs
        state: present
        dev: /dev/disk/by-id/google-persistent-disk-1

    - name: Fetch the UUID of volume
      command: blkid -s UUID -o value /dev/disk/by-id/google-persistent-disk-1
      changed_when: false
      register: blkid_out

    - name: Mount up device by UUID
      ansible.posix.mount:
        path: "{{ mongod_path }}"
        src: UUID={{ blkid_out.stdout }}
        fstype: xfs
        opts: noatime
        state: mounted

    - name: copy RPM files from local machine
      block:
        - name: copy files
          copy:
            src: "{{ local_rpm_location }}"
            dest: "{{ target_rpm_location }}"

        - name: find copied Percona RPMs
          find:
            paths: "{{ target_rpm_location }}"
            patterns: "*.rpm"
          register: percona_rpms

        - set_fact:
            rpm_list: "{{ percona_rpms.files | map(attribute='path') | list  }}"

        - name: install copied RPM files
          yum:
            name: "{{ rpm_list }}"
            state: present
            disablerepo: "*"
            #disable_plugin: "*"

      when: copy_files | bool

    - name: install RPM files from repository
      block:
        - name: install percona key
          rpm_key:
            key: "{{ percona_key_location }}"
            state: present

        - name: install Percona repositories
          package:
            name: "{{ percona_repo }}"
            state: present

        - name: Enable specific MongoDB version
          shell: "/usr/bin/percona-release enable {{ mongo_release }} && /usr/bin/percona-release enable tools"

        - name: install RPM from repository
          package:
            name: "{{ item }}"
            state: present
          with_items: "{{ packages }}"
      
      when: not copy_files | bool

- name: prepare auth
  hosts: cfg:shard*:rs*
  gather_facts: false
  tags: os_conf
  tasks:
    - name: check if old Mongo client exists
      stat: 
        path: /bin/mongo
      register: mongo_binary

    - name: Create a symbolic link for Mongo shell
      become: yes
      ansible.builtin.file:
        src: /bin/mongosh
        dest: /bin/mongo
        owner: root
        group: root
        state: link
      when: mongo_binary.stat.exists == False

    - name: set up extra arguments for Mongo client TLS
      set_fact:
        mongo_extra_args: " --tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates "
      when: use_tls | bool

    - name: set up keyfile if not using TLS
      become: yes
      copy: 
        dest: "{{ keyFile_location }}"
        content: "{{ keyfile_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: not use_tls | bool

- name: prepare the config servers
  hosts: cfg
  tags: mongo_cfgsrv
  gather_facts: false
  tasks:
    - name: copy mongod.conf on config server
      become: yes
      template: 
        src: templates/mongod-cfgserver.conf.j2
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: 0644

    - name: prepare the init command for cfg replica set
      template: 
        src: templates/init-rs-cfg.js.j2
        dest: /tmp/init-rs.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

- name: prepare the replica sets
  gather_facts: false
  hosts: shard*:rs*
  tags: mongo_rs
  tasks:
    - name: copy mongod.conf to replica set member
      become: yes
      template:
        src: templates/mongod-replicaset.conf.j2
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: 0644

    - name: initialize the replica set command
      template:
        src: templates/init-rs.js.j2
        dest: /tmp/init-rs.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

- name: bootstrap the replica sets
  gather_facts: false
  hosts: cfg:shard*:rs*
  tags: bootstrap_rs
  tasks:
    - name: create the datadir
      become: yes
      file:
        path: "{{ mongod_path }}"
        owner: mongod
        mode: '0750'
        state: directory

    - name: figure out the Mongo port
      shell: "grep -h -i port /etc/mongod.conf | awk '{print $2}' | head -1"
      register: mongo_port_result
      changed_when: false
      failed_when: mongo_port_result.stdout == ""

    - set_fact:
        mongo_port: "{{ mongo_port_result.stdout }}"

    - name: set up encryption keyfile
      become: yes
      copy:
        dest: "{{ encryption_keyfile }}"
        content: "{{ encryption_key_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: keyfile_encryption | bool

    - name: set up Vault tokenfile
      become: yes
      copy:
        dest: "{{ vault_tokenfile }}"
        content: "{{ vault_tokenfile_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: vault_encryption | bool

    - name: start mongod on replica set member
      become: yes
      service:
        name: mongod
        state: started

    - name: wait a few secs so servers finish starting
      pause:
        seconds: 5

    - name: run the init command for replica set
      shell: mongo {{ mongo_extra_args | default("") }} --host localhost --port {{ mongo_port }} < /tmp/init-rs.js
      when: mongodb_primary is defined and mongodb_primary

    - name: wait a few secs so replica sets finish initializing
      pause:
        seconds: 5

- name: create the local users & logrotate
  hosts: cfg:shard*:rs*
  tags: os_conf
  gather_facts: false
  tasks:
    - name: copy logrotate conf
      become: yes
      template:
        src: templates/logrotate-mongod.conf.j2
        dest: /etc/logrotate.d/mongod
        mode: 0644

    - name: prepare the command to create root user
      template:
        src: templates/createRoot.js.j2
        dest: /tmp/createRoot.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

    - name: figure out the mongo port
      shell: "grep -h -i port /etc/mongod.conf | awk '{print $2}' | head -1"
      register: mongo_port_result
      changed_when: false
      failed_when: mongo_port_result.stdout == ""

    - set_fact:
        mongo_port: "{{ mongo_port_result.stdout }}"

    - name: run the command to create the root user
      shell: mongo admin {{ mongo_extra_args | default("") }} --host localhost --port {{ mongo_port  }} < /tmp/createRoot.js
      when: mongodb_primary is defined and mongodb_primary

    - name: prepare the commands to create pbm and pmm users and roles
      template:
        src: templates/createUsers.js.j2
        dest: /tmp/createUsers.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

    - name: run the command to create the PBM and PMM users and roles
      shell: mongo admin {{ mongo_extra_args | default("") }} -u root -p {{ mongo_root_password }} --port {{ mongo_port }} < /tmp/createUsers.js
      when: mongodb_primary is defined and mongodb_primary
      
- name: install mongos routers
  gather_facts: false
  hosts: mongos
  become: yes
  tags: mongos
  tasks:
    - name: copy RPM files from local machine
      block:
        - name: copy files
          copy:
            src: "{{ local_rpm_location }}"
            dest: "{{ target_rpm_location }}"

        - name: find copied percona RPMs
          find:
            paths: "{{ target_rpm_location }}"
            patterns: "*.rpm"
          register: percona_rpms

        - set_fact:
            rpm_list: "{{ percona_rpms.files | map(attribute='path') | list  }}"

        - name: install copied RPM files
          yum:
            name: "{{ rpm_list }}"
            state: present
            disablerepo: "*"
            #disable_plugin: "*"

      when: copy_files | bool

    - name: install RPM files from repository
      block:
        - name: install percona key
          rpm_key:
            key: "{{ percona_key_location }}"
            state: present

        - name: install Percona repositories
          package:
            name: "{{ percona_repo }}"
            state: present

        - name: Enable specific MongoDB version
          shell: "/usr/bin/percona-release enable {{ mongo_release }} && /usr/bin/percona-release enable tools"

        - name: install RPM from repository
          package:
            name: "{{ item }}"
            state: present
          with_items: "{{ router_packages }}"
      when: not copy_files | bool

    - name: check if old Mongo client exists
      stat: 
        path: /bin/mongo
      register: mongo_binary

    - name: Create a symbolic link for Mongo shell
      become: yes
      ansible.builtin.file:
        src: /bin/mongosh
        dest: /bin/mongo
        owner: root
        group: root
        state: link
      when: mongo_binary.stat.exists == False

    - name: set up extra arguments for Mongo client TLS 
      set_fact:
        mongo_extra_args: " --tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates "
      when: use_tls | bool

    - name: set up keyfile if not using TLS
      become: yes
      copy: 
        dest: "{{ keyFile_location }}"
        content: "{{ keyfile_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: not use_tls | bool

    - name: copy mongos.conf 
      template:
        src: templates/mongos.conf.j2
        dest: /etc/mongos.conf
        owner: root
        group: root
        mode: 0644

    - name: setup logrotate conf for mongos
      template:
        src: templates/logrotate-mongos.conf.j2
        dest: /etc/logrotate.d/mongos
        mode: 0644

    - name: copy systemd template file for mongos
      template:
        src: templates/mongos.service.j2
        dest: /usr/lib/systemd/system/mongos.service
        mode: 0644

    - name: disable selinux
      shell: /usr/sbin/setenforce 0

    - name: start mongos service
      systemd:
        name: mongos
        state: started
        enabled: yes
        daemon_reload: yes

    - name: wait a few secs so replica sets finish initializing
      pause:
        seconds: 10

- name: add the shards to the cluster
  hosts: shard*
  tags: add_shards
  gather_facts: false
  tasks:
    - name: add the shards to the cluster
      shell: mongo admin {{ mongo_extra_args | default("") }} -u root -p {{ mongo_root_password }} --port {{ mongos_port }} --eval "sh.addShard('{{ group_names[0] }}/{{ ansible_hostname }}:{{ shard_port }}')"
      delegate_to: "{{ groups.mongos | first }}"
      when: mongodb_primary is defined and mongodb_primary

- name: configure PBM
  hosts: cfg:shard*:rs*
  gather_facts: false
  tags: backup
  become: true
  tasks:
    - name: figure out the Mongo port
      shell: "grep -h -i port /etc/mongod.conf | awk '{print $2}' | head -1"
      register: mongo_port_result
      changed_when: false
      failed_when: mongo_port_result.stdout == ""

    - set_fact:
        mongo_port: "{{ mongo_port_result.stdout }}"

    - name: figure out the Mongo TLS URI
      set_fact:
        mongo_uri_tls: "/?tls=true&tlsCertificateKeyFile={{ certificateKeyFile }}&tlsCAFile={{ CAFile }}"
      when: use_tls | bool

    - name: configure credentials file for PBM agent
      template:
        src: templates/pbm-agent.j2
        dest: /etc/sysconfig/pbm-agent

    - name: start PBM agent
      service: 
        name: pbm-agent
        state: restarted

    - name: prepare storage details file for PBM
      template:
        src: templates/pbm-storage.conf.j2
        dest: /tmp/pbm-storage.conf

- name: configure backup URI for replica sets
  hosts: rs*
  gather_facts: false
  tags: backup
  become: true
  tasks:
    - name: generate PBM_MONGODB_URI
      set_fact:
        mongodb_uri: "mongodb://{{ pbmuser }}:{{ pbmpwd }}@{% for h in groups[ group_names[0] ] %}{{ h }}:{{ replicaset_port }}{% if not loop.last %},{% endif %}{% endfor %}/?replicaSet={{ group_names[0] }}&authSource=admin{{ mongo_uri_tls | default('') }}"

- name: configure backup URI for sharded cluster
  hosts: shard*:cfg*
  gather_facts: false
  tags: backup
  become: true
  tasks:
    - name: generate PBM_MONGODB_URI
      set_fact:
        mongodb_uri: "mongodb://{{ pbmuser }}:{{ pbmpwd }}@{% for h in groups[ 'cfg' ] %}{{ h }}:{{ cfg_server_port }}{% if not loop.last %},{% endif %}{% endfor %}/?replicaSet=mongo-cfg&authSource=admin{{ mongo_uri_tls | default('') }}"

- name: configure backup 
  hosts: shard*:cfg*:rs*
  gather_facts: false
  tags: backup
  become: true
  tasks:
    - name: set up storage location for PBM
      shell: pbm config --file /tmp/pbm-storage.conf --mongodb-uri '{{ mongodb_uri }}'
      when: mongodb_primary is defined and mongodb_primary

    - name: set up backup cron job
      cron:
        name: pbm backup
        minute: 3
        hour: 0
        user: mongod
        job: /usr/bin/pbm backup --mongodb-uri '{{ mongodb_uri }}'
        cron_file: pbm_daily_backup

    - name: set up purge old backups cron job
      cron:
        name: pbm purge
        minute: 3
        hour: 4 
        user: mongod
        job: /usr/bin/pbm delete-backup --force --older-than $(date -u -d '-7 days' +'\%Y-\%m-\%d') --mongodb-uri '{{ mongodb_uri }}'
        cron_file: pbm_purge_old

    - name: set up PBM_MONGODB_URI
      lineinfile:
        dest: /root/.bash_profile
        line: export PBM_MONGODB_URI='{{ mongodb_uri }}'
        state: present

- name: configure PMM server
  hosts: pmm
  gather_facts: false
  tags: pmm_server
  become: true
  tasks:

    - name: Create PMM dir
      file:
        path: "{{ pmm_dir }}"
        state: directory
        owner: root 
        group: root
        mode: 0710

    - name: Create an XFS filesystem 
      community.general.filesystem:
        fstype: xfs
        state: present
        dev: /dev/disk/by-id/google-persistent-disk-1

    - name: Fetch the UUID of volume
      command: blkid -s UUID -o value /dev/disk/by-id/google-persistent-disk-1
      changed_when: false
      register: blkid_out

    - name: Mount up device by UUID
      ansible.posix.mount:
        path: "{{ pmm_dir }}"
        src: UUID={{ blkid_out.stdout }}
        fstype: xfs
        opts: noatime
        state: mounted

    - name: install yum utils
      yum:
        name: yum-utils
        state: present

    - name: yum config manager
      shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: install Docker
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - docker-ce 
        - docker-ce-cli
        - containerd.io

    - name: start Docker
      service:
        name: docker
        state: restarted

    - name: pull PMM image 
      shell: docker pull docker.io/percona/pmm-server:{{ pmm_version }}

    - name: create PMM volume
      shell: docker create -v /srv/ --name pmm-data percona/pmm-server:{{ pmm_version }} /bin/true

    - name: run PMM container
      shell: docker run --detach --restart always --publish 443:443 --volumes-from pmm-data --name pmm-server percona/pmm-server:{{ pmm_version }}    

- name: configure monitoring with PMM
  hosts: cfg:shard*:rs*:mongos
  gather_facts: true
  become: true
  tags: monitoring
  tasks:
    - name: figure out the Mongo port
      shell: "grep -h -i port /etc/mongo?.conf | awk '{print $2}' | head -1"
      register: mongo_port_result
      changed_when: false
      failed_when: mongo_port_result.stdout == ""
    - set_fact:
        mongo_port: "{{ mongo_port_result.stdout }}"

    - name: Ensure pmm-agent is started
      service:
        name:  pmm-agent
        state: started

    - name: figure out the SSL parameters for pmm
      set_fact:
        pmm_ssl_params: " --tls --tls-certificate-key-file={{ certificateKeyFile }} --tls-ca-file={{ CAFile }} "
      when: use_tls | bool

    - name: point agent to the PMM server
      shell: pmm-admin config --server-url=https://{{ pmm_server_user }}:{{ pmm_server_pwd }}@{{ pmm_private_ip }}:443 --server-insecure-tls --force

    - name: add MongoDB metrics collector 
      shell: pmm-admin add mongodb --username={{ mongodb_pmm_user }} --password={{ mongodb_pmm_user_pwd }} {{ pmm_ssl_params | default("") }} --cluster {{ cluster }} --host={{ ansible_fqdn }} --port={{ mongo_port }} --tls-skip-verify --enable-all-collectors
