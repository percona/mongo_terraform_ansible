---
- name: Install MongoDB
  hosts: cfg:shards:replsets
  become: yes
  tags: install
  environment:
    PERCONA_TELEMETRY_DISABLE: "{{ '1' if disable_telemetry else '0' }}"
  tasks:
    - name: Install packages from local filesystem
      block:
        - name: copy files
          copy:
            src: "{{ mongod_local_package_location }}"
            dest: "{{ mongod_target_package_location }}"

        - name: Find and register copied packages
          find:
            paths: "{{ mongod_target_package_location }}"
            patterns:
              - "*.rpm"
              - "*.deb"
          register: copied_packages  

        - name: Get the paths of copied files
          set_fact:
            mongod_package_list: "{{ copied_packages.files | map(attribute='path') | list }}"      

        - name: Install copied RPM packages (RedHat)
          yum:
            name: "{{ mongod_package_list }}"
            state: present
            disablerepo: "*"
          when:
            - ansible_os_family == 'RedHat'

        - name: Install copied DEB packages (Debian/Ubuntu)
          apt:
            deb: "{{ item }}"
            state: present
          loop: "{{ mongod_package_list }}"
          when:
            - ansible_os_family == 'Debian'

      when: copy_files | bool

    - name: Install mongod from repository
      block:
        - name: Enable the specific MongoDB version
          shell: "/usr/bin/percona-release enable {{ mongo_release }}"

        - name: Install mongod packages from repository
          package:
            name: "{{ item }}"
            state: present
          loop: "{{ mongod_packages }}"

      when: not copy_files | bool

    - name: Disable Percona telemetry
      systemd:
        name: percona-telemetry-agent
        enabled: false
        state: stopped
        daemon_reload: yes
      ignore_errors: true
      when: disable_telemetry | bool

- name: Prepare the configuration
  hosts: cfg:shards:replsets
  tags: bootstrap_rs
  tasks:
    - name: Set up shared mongo keyfile 
      become: yes
      copy:
        dest: "{{ keyFile_location }}"
        content: "{{ keyfile_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: not use_tls | bool

    - name: Copy mongod.conf 
      become: yes
      template:
        src: "{{ mongod_conf_template }}"
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: 0644

    - name: Create the MongoDB directories
      become: yes
      file:
        path: "{{ item }}"
        owner: mongod
        mode: '0750'
        state: directory
      with_items:
        - "{{ mongod_path }}"
        - "{{ mongod_log_path }}"

    - name: Set up keyfile for encryption at rest
      become: yes
      copy:
        dest: "{{ encryption_keyfile }}"
        content: "{{ encryption_key_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: keyfile_encryption | bool

    - name: Set up Vault tokenfile
      become: yes
      copy:
        dest: "{{ vault_tokenfile }}"
        content: "{{ vault_tokenfile_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: vault_encryption | bool

    - name: Start mongod on replica set member
      become: yes
      service:
        name: mongod
        state: restarted

    - name: Wait until mongod responds to ping
      shell: |
        mongosh {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 --quiet --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1
      register: mongo_ping
      retries: 20
      delay: 1
      until: mongo_ping.rc == 0
      changed_when: false

    - name: Prepare the init command for replica set
      template:
        src: "{{ rs_init_template }}"
        dest: /tmp/init-rs.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

    - name: Run the init command for replica set
      shell: mongosh {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 < /tmp/init-rs.js
      when: mongodb_primary is defined and mongodb_primary

    - name: Wait for PRIMARY in replica sets
      shell: |
        mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 --quiet --eval 'rs.status().members.filter(m => m.stateStr == "PRIMARY").length' | grep -q '1'
      register: primary_check
      retries: 10
      delay: 2
      until: primary_check.rc == 0
      changed_when: false

- name: Create the local users & logrotate
  hosts: cfg:shards:replsets
  tags: os_conf
  tasks:
    - name: Copy logrotate conf
      become: yes
      template:
        src: templates/logrotate-mongod.conf.j2
        dest: /etc/logrotate.d/mongod
        mode: 0644

    - name: Create the MongoDB root user
      shell: |
        mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 --eval 'db.createUser({user: "{{ mongo_admin_user }}", pwd: "{{ mongo_admin_password }}", roles: ["root"]})'
      when: mongodb_primary is defined and mongodb_primary

    - name: Prepare the commands to create the PBM and PMM users and roles
      template:
        src: templates/createUsers.js.j2
        dest: /tmp/createUsers.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

    - name: Create the PBM and PMM users and roles
      shell: mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} -u {{ mongo_admin_user }} -p {{ mongo_admin_password }} --port {{ mongo_port }} --host {{ ansible_fqdn }} < /tmp/createUsers.js
      when: mongodb_primary is defined and mongodb_primary

    - name: Set up an alias to login easily
      become: yes
      lineinfile:
        dest: /etc/profile
        line: alias mongo='mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} -u {{ mongo_admin_user }} -p {{ mongo_admin_password }} --port {{ mongo_port }} --host {{ ansible_fqdn }}'
        state: present