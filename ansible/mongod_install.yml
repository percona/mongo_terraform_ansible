---
- name: install MongoDB
  hosts: cfg:shards:replsets
  become: yes
  tags: install
  environment:
    PERCONA_TELEMETRY_DISABLE: 1
  tasks:
    - name: Create MongoDB datadir
      file:
        path: "{{ mongod_path }}"
        state: directory
        mode: 0770

    - name: copy RPM files from local machine
      block:
        - name: copy files
          copy:
            src: "{{ local_rpm_location }}"
            dest: "{{ target_rpm_location }}"

        - name: find copied RPMs
          find:
            paths: "{{ target_rpm_location }}"
            patterns: "*.rpm"
          register: percona_rpms

        - name: get the paths of copied files
          set_fact:
            rpm_list: "{{ percona_rpms.files | map(attribute='path') | list }}"

        - name: install copied RPM files
          yum:
            name: "{{ rpm_list }}"
            state: present
            disablerepo: "*"

      when: copy_files | bool

    - name: install mongod files from repository
      block:
        - name: Enable the specific MongoDB version
          shell: "/usr/bin/percona-release enable {{ mongo_release }}"

        - name: install mongod RPMs from repository
          package:
            name: "{{ item }}"
            state: present
          with_items: "{{ mongod_packages }}"

      when: not copy_files | bool

    - name: disable Percona telemetry
      systemd:
        name: percona-telemetry-agent
        enabled: false
        state: stopped
        daemon_reload: yes
      ignore_errors: true

- name: prepare the configuration
  hosts: cfg:shards:replsets
  tags: bootstrap_rs
  tasks:
    - name: set up keyfile 
      become: yes
      copy:
        dest: "{{ keyFile_location }}"
        content: "{{ keyfile_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: not use_tls | bool

    - name: copy mongod.conf 
      become: yes
      template:
        src: "{{ mongod_conf_template }}"
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: 0644

    - name: create the MongoDB datadir
      become: yes
      file:
        path: "{{ mongod_path }}"
        owner: mongod
        mode: '0750'
        state: directory

    - name: set up keyfile for encryption at rest
      become: yes
      copy:
        dest: "{{ encryption_keyfile }}"
        content: "{{ encryption_key_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: keyfile_encryption | bool

    - name: set up Vault tokenfile
      become: yes
      copy:
        dest: "{{ vault_tokenfile }}"
        content: "{{ vault_tokenfile_content }}"
        owner: mongod
        group: root
        mode: 0600
      when: vault_encryption | bool

    - name: start mongod on replica set member
      become: yes
      service:
        name: mongod
        state: started

    - name: Wait until mongod responds to ping
      shell: |
        mongosh {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 --quiet --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1
      register: mongo_ping
      retries: 20
      delay: 1
      until: mongo_ping.rc == 0
      changed_when: false

    - name: prepare the init command for replica set
      template:
        src: "{{ rs_init_template }}"
        dest: /tmp/init-rs.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

    - name: run the init command for replica set
      shell: mongosh {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 < /tmp/init-rs.js
      when: mongodb_primary is defined and mongodb_primary

    - name: Wait for PRIMARY in replica sets
      shell: |
        mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 --quiet --eval 'rs.status().members.filter(m => m.stateStr == "PRIMARY").length' | grep -q '1'
      register: primary_check
      retries: 20
      delay: 1
      until: primary_check.rc == 0
      changed_when: false

- name: create the local users & logrotate
  hosts: cfg:shards:replsets
  tags: os_conf
  tasks:
    - name: copy logrotate conf
      become: yes
      template:
        src: templates/logrotate-mongod.conf.j2
        dest: /etc/logrotate.d/mongod
        mode: 0644

    - name: create the MongoDB root user
      shell: |
        mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} --port {{ mongo_port }} --host 127.0.0.1 --eval 'db.createUser({user: "{{ mongo_admin_user }}", pwd: "{{ mongo_admin_password }}", roles: ["root"]})'
      when: mongodb_primary is defined and mongodb_primary

    - name: prepare the commands to create the PBM and PMM users and roles
      template:
        src: templates/createUsers.js.j2
        dest: /tmp/createUsers.js
        mode: 0644
      when: mongodb_primary is defined and mongodb_primary

    - name: create the PBM and PMM users and roles
      shell: mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} -u {{ mongo_admin_user }} -p {{ mongo_admin_password }} --port {{ mongo_port }} --host {{ inventory_hostname }} < /tmp/createUsers.js
      when: mongodb_primary is defined and mongodb_primary

    - name: set up an alias to login easily
      become: yes
      lineinfile:
        dest: /etc/profile
        line: alias mongo='mongosh admin {% if use_tls %}--tls --tlsCertificateKeyFile {{ certificateKeyFile }} --tlsCAFile {{ certificateKeyFile }} --tlsAllowInvalidCertificates{% endif %} -u {{ mongo_admin_user }} -p {{ mongo_admin_password }} --port {{ mongo_port }} --host {{ inventory_hostname }}'
        state: present