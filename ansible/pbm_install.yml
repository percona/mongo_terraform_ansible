---
- name: Install PBM client
  hosts: cfg:shards:replsets
  become: yes
  tags: install,backup
  environment:
    PERCONA_TELEMETRY_DISABLE: "{{ '1' if disable_telemetry else '0' }}"
  tasks:
    - name: Install packages from local filesystem
      block:

        - name: copy files
          copy:
            src: "{{ pbm_local_package_location }}"
            dest: "{{ pbm_target_package_location }}"

        - name: Find and register copied packages
          find:
            paths: "{{ pbm_target_package_location }}"
            patterns:
              - "*.rpm"
              - "*.deb"
          register: copied_packages  

        - name: Get the paths of copied files
          set_fact:
            pbm_package_list: "{{ copied_packages.files | map(attribute='path') | list }}"      

        - name: Install copied RPM packages (RedHat)
          yum:
            name: "{{ pbm_package_list }}"
            state: present
            disablerepo: "*"
          when:
            - ansible_os_family == 'RedHat'

        - name: Install copied DEB packages (Debian/Ubuntu)
          apt:
            deb: "{{ item }}"
            state: present
          loop: "{{ pbm_package_list }}"
          when:
            - ansible_os_family == 'Debian'

      when: copy_files | bool

    - name: Install PBM package files from repository
      block:
        - name: Enable PBM repository
          shell: "/usr/bin/percona-release enable pbm release"

        - name: Install pbm packages from repository
          package:
            name: "{{ item }}"
            state: present
          with_items: "{{ pbm_package }}"

      when: not copy_files | bool

    - name: Disable Percona telemetry
      systemd:
        name: percona-telemetry-agent
        enabled: false
        state: stopped
        daemon_reload: yes
      ignore_errors: true
      when: disable_telemetry | bool

- name: Prepare the PBM connection string
  hosts: cfg:shards:replsets
  tags: backup
  become: true
  tasks:

- name: Figure out backup URI for replica sets
  hosts: replsets
  tags: backup
  become: true
  tasks:
    - name: generate PBM_MONGODB_URI
      set_fact:
        mongodb_uri: "mongodb://{{ pbmuser }}:{{ pbmpwd }}@{% for h in groups[ group_names[0] ] %}{{ h }}:{{ mongo_port }}{% if not loop.last %},{% endif %}{% endfor %}/?replicaSet={{ group_names[0] }}&authSource=admin{% if use_tls %}&tls=true&tlsCertificateKeyFile={{ certificateKeyFile }}&tlsCAFile={{ CAFile }}{% endif %}"

- name: Figure out backup URI for sharded cluster
  hosts: shards:cfg
  tags: backup
  become: true
  tasks:
    - name: generate PBM_MONGODB_URI
      set_fact:
        mongodb_uri: "mongodb://{{ pbmuser }}:{{ pbmpwd }}@{% for h in groups[ 'cfg' ] %}{{ h }}:{{ cfg_server_port }}{% if not loop.last %},{% endif %}{% endfor %}/?replicaSet={{ cluster }}-cfg&authSource=admin{% if use_tls %}&tls=true&tlsCertificateKeyFile={{ certificateKeyFile }}&tlsCAFile={{ CAFile }}{% endif %}"

- name: Configure PBM agent and CLI
  hosts: cfg:shards:replsets
  tags: backup
  become: true
  vars_files:
    - "vars/{{ ansible_os_family }}.yml"     
  tasks:
    - name: set up PBM_MONGODB_URI
      lineinfile:
        dest: /etc/profile
        line: export PBM_MONGODB_URI='{{ mongodb_uri }}'
        state: present

    - name: Configure credentials file for PBM agent
      template:
        src: templates/pbm-agent.j2
        dest: "{{ pbm_env_file }}"
      when: arbiter is not defined

    - name: Start PBM agent
      service:
        name: pbm-agent
        state: restarted
      when: arbiter is not defined

    - name: Prepare storage details file for PBM
      template:
        src: templates/pbm-storage.conf.j2
        dest: "{{ pbm_config_path }}"
      when: arbiter is not defined

- name: Configure backup process
  hosts: cfg:replsets
  become: yes
  tags: backup
  tasks:
    - name: set up storage location for PBM
      shell: pbm config --file '{{ pbm_config_path }}' --mongodb-uri '{{ mongodb_uri }}'
      when: mongodb_primary is defined and mongodb_primary

    - name: Set up backup cron job
      cron:
        name: pbm backup
        minute: '{{ pbm_backup_minute }}'
        hour: '{{ pbm_backup_hour }}'
        user: '{{ pbm_os_user }}'
        job: /usr/bin/pbm backup --type '{{ pbm_backup_type }}' --mongodb-uri '{{ mongodb_uri }}'
        cron_file: pbm_daily_backup
      when: arbiter is not defined

    - name: Set up purge old backups cron job
      cron:
        name: pbm purge
        minute: '{{ pbm_purge_minute }}'
        hour: '{{ pbm_purge_minute }}'
        user: '{{ pbm_os_user }}'
        job: /usr/bin/pbm cleanup --force --older-than $(date -u -d '-{{ pbm_retention_days }} days' +'\%Y-\%m-\%d') --mongodb-uri '{{ mongodb_uri }}'
        cron_file: pbm_purge_old
      when: arbiter is not defined

