---
- name: Configure PMM server
  hosts: pmm
  tags: pmm_server
  become: true
  tasks:
    - name: Create PMM directory
      file:
        path: "{{ pmm_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0710

    - name: Install yum utils
      yum:
        name: yum-utils
        state: present

    - name: add the Docker repository
      shell: yum-config-manager --add-repo {{ docker_repo }}

    - name: Install Docker
      yum:
        name: "{{ item }}"
        state: present
      with_items: "{{ docker_packages }}"

    - name: Start Docker
      service:
        name: docker
        state: started

    - name: Check if Docker network exists
      command: docker network ls --filter name=^pmm-network$ --format '{{ "{{.Name}}" }}'
      register: docker_networks

    - name: Create Docker network if not exists
      shell: docker network create pmm-network
      when: docker_networks.stdout_lines == []

    - name: Get list of existing containers
      command: docker ps -a --format {{ '{{.Names}}' }}
      register: docker_containers

    - name: Set facts for container existence
      set_fact:
        renderer_exists: "{{ 'renderer' in docker_containers.stdout_lines }}"
        pmm_server_exists: "{{ 'pmm-server' in docker_containers.stdout_lines }}"
        watchtower_exists: "{{ 'watchtower' in docker_containers.stdout_lines }}"

    - name: Run Watchtower container
      shell: >
        docker run -d --network=pmm-network --name watchtower --restart always
        -e WATCHTOWER_HTTP_API_TOKEN={{ watchtower_token }}
        -e WATCHTOWER_HTTP_API_UPDATE=1
        --volume /var/run/docker.sock:/var/run/docker.sock
        percona/watchtower:latest
      when: not watchtower_exists

    - name: Run Grafana renderer container
      shell: >
        docker run -d --network=pmm-network --name renderer --restart always
        -e IGNORE_HTTPS_ERRORS=true
        grafana/grafana-image-renderer:latest
      when: not renderer_exists
      
    - name: Create PMM data volume if not exists
      shell: docker volume create pmm-data
      register: volume_output
      changed_when: "'pmm-data' in volume_output.stdout"

    - name: Run PMM server container
      shell: >
        docker run -d --network=pmm-network --name pmm-server --restart always
        -p {{ pmm_external_port }}:{{ pmm_port }}
        --volume pmm-data:/srv
        -e GF_RENDERING_SERVER_URL=http://renderer:8081/render
        -e GF_RENDERING_CALLBACK_URL=https://pmm-server:{{ pmm_port }}/graph/
        -e PMM_WATCHTOWER_HOST=http://watchtower:8080
        -e PMM_WATCHTOWER_TOKEN={{ watchtower_token }}
        {{ pmm_image }}
      when: not pmm_server_exists